<?xml version="1.0" encoding="UTF-8"?>
<testcase xmlns="http://xlt.xceptance.com/xlt-script/2" version="6">
  <tags>product,pdp,quickview,functionality,options</tags>
  <description>Verifies the functionality of option products on quickview (QV) and product details pages (PDP) . This is basically interaction with the option boxes in comparison to the other test that is more layout.

# Setup
Open the site and remove cookies

#  Scope
Validate correct funtionality of the option field 

- validate funtionality on QV
- go to pdp
- validate funtionality on PDP</description>
  <codecomment># Setup - Start Session</codecomment>
  <module name="modules.helper.FHelper_Session_flowToStartSession"/>
  <action name="SearchProducts"/>
  <module name="modules.pages.search.MSearch_enterTextAndSubmit">
    <parameter name="searchText" value="${searchPhrase}"/>
  </module>
  <codecomment># Scope</codecomment>
  <codecomment>--------------------------------</codecomment>
  <codecomment>## Functional Option Product Test

- open QV and change the options several times, validate every time that the sales price changes
- chang to PDP and change the options again, validate every time that the sales price changes</codecomment>
  <codecomment>### Caution
By default no extra option should be selected, by changing from QV  to PDP the Option should not be stored</codecomment>
  <codecomment>--------------------------------</codecomment>
  <codecomment>Hover over Product and click on quick view buttom</codecomment>
  <action name="OpenQuickView"/>
  <module name="modules.pages.catalog.MCatalog_clickQuickViewByProductTitle">
    <parameter name="title" value="${optionProductName}"/>
  </module>
  <module name="modules.pages.product.productquickview.VProductQV_validateHeader">
    <parameter name="prevButtonState" value=":not([disabled])"/>
    <parameter name="nextButtonState" value=":not([disabled])"/>
  </module>
  <module name="modules.pages.product.VProduct_validatesOptionProductOnly"/>
  <action name="SelectOptionQuickview"/>
  <module name="modules.pages.product.MProduct_selectOptionByLabel">
    <parameter name="selectedLabel" value="${productOption}"/>
  </module>
  <command name="assertSelectedLabel" target="css=.product-options ul .option-dropdown .value select.product-option" value="${productOption}"/>
  <action name="ProductDetailPageFromQV"/>
  <codecomment>Goto PDP from QV</codecomment>
  <module name="modules.pages.product.productquickview.MProductQV_clickViewFullDetails">
    <parameter name="productName" value="${optionProductName}"/>
  </module>
  <codecomment>Verify product detail page</codecomment>
  <module name="modules.global.headerfooternav.VNavigation_validateBreadcrumb">
    <parameter name="breadcrumbPath" value="*${optionProductCategoryLevel1} ${optionProductCategoryLevel2} ${optionProductCategoryLevel3} ${optionProductName}"/>
  </module>
  <module name="modules.pages.product.VProduct_validatePricePattern">
    <parameter name="pricePattern" value="${storefront_pricePattern}"/>
  </module>
  <module name="modules.pages.product.VProduct_validatesOptionProductOnly"/>
  <codecomment>Prices for Options will not be stored again, because theprice should be the same as on QV</codecomment>
  <codecomment>Selects the default option to check if nothing changes when selected</codecomment>
  <action name="SelectOptionPDP"/>
  <module name="modules.pages.product.MProduct_selectOptionByLabel">
    <parameter name="selectedLabel" value="${productOption}"/>
  </module>
  <command name="assertSelectedLabel" target="css=.product-options ul .option-dropdown .value select.product-option" value="${productOption}"/>
</testcase>