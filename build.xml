<?xml version="1.0"?>
<project default="all" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

    <!--
        Reads the properties from a file.
    -->
    <property file="build.properties"/>

    <!--
        Builds the XLT class path for further reference.
    -->
    <path id="xlt.classpath">
        <pathelement path="${xlt.classes.dir}"/>
        <fileset dir="${xlt.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    <!--
        Builds the test suite class path for further reference.
    -->
    <path id="test.suite.classpath">
        <path refid="xlt.classpath"/>
        <pathelement location="${test.classes.dir}"/>
        <fileset dir="${test.lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!--
        Deletes any result file from a previous test run.
    -->
    <target name="clean">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${test.classes.dir}" includes="**/*"/>
            <fileset dir="${test.results.dir}" includes="**/*"/>
        </delete>
    </target>

    <!--
        Compiles the Java sources in ${test.src.dir} to ${test.classes.dir}.
        Any non-Java file in the sources dir will be copied there, too.
    -->
    <target name="compile">
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" debug="on" optimize="off" deprecation="on"
               includeantruntime="false">
            <classpath refid="test.suite.classpath"/>
        </javac>
        <copy todir="${test.classes.dir}">
            <fileset dir="${test.src.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <!--
        Prepares everything for testing.
    -->
    <target name="test.init" depends="compile">
        <mkdir dir="${test.results.dir}"/>
    </target>

    <macrodef name="macro.junit.report">
        <sequential>
            <!--
                Create a test report from the test results.
            -->
            <junitreport todir="${test.results.dir}">
                <!-- determine the test result files -->
                <fileset dir="${test.results.dir}">
                    <include name="TEST-*.xml"/>
                </fileset>

                <!-- generate the HTML report -->
                <report format="noframes" todir="${test.results.dir}"/>
            </junitreport>
        </sequential>
    </macrodef>

    <macrodef name="macro.junit.run">
        <attribute name="file" />
        <attribute name="basepath" />
       
        <sequential>
            <echo>File to execute: @{file}</echo>
            <echo>test.src.dir: ${test.src.dir}</echo>
    
            <junit fork="yes" forkmode="perBatch" printsummary="on" dir="${basedir}" showoutput="off">
                <!-- build the class path -->
                <classpath refid="test.suite.classpath"/>
                
                <!-- configure the environment for XLT-based test cases -->
                <sysproperty key="com.xceptance.xlt.home" value="${basedir}"/>
                <sysproperty key="com.xceptance.xlt.data.directory" value="${test.config.dir}/data"/>
                <sysproperty key="log4j.configuration" value="file:${test.config.dir}/dev-log4j.properties"/>
                <sysproperty if:set="webdriver" key="xlt.webDriver" value="${webdriver}" />

                <!-- configure the test result formatter -->
                <formatter type="xml"/>

<!-- <test todir="${test.results.dir}" skipNonTests="true" name="tests.product.TProduct_Validate_VariationProductFunctionality" /> -->
                

                <!-- execute all configured tests -->
                <batchtest todir="${test.results.dir}" skipNonTests="true">
                    <file file="@{basepath}/@{file}" basedir="@{basepath}" />
                </batchtest>
            </junit>        
        </sequential>
    </macrodef>
    
        
    <target name="modern" depends="test.init">
        <!-- do we want parallel execution?, if not set count to 1 -->
        <script language="javascript">
            <![CDATA[
            if (project.getProperty("parallelCount") == null) {
                    project.setProperty("parallelCount", 1);
            }
            ]]>    
        </script>
        
        <!-- get all test cases and run them-->
        <script language="javascript">
            <![CDATA[
                importClass(java.io.File);
            
                // get the list of tests to be executed
                fs = project.createDataType("fileset");
                fs.setDir(new File(project.getProperty("test.src.dir")));
                fs.setIncludes(project.getProperty("test.cases.java"));
                
                // setup parallel executor
                parallel = project.createTask("parallel");
                parallel.setThreadCount(project.getProperty("parallelCount"));
                
                // setup tasks
                srcFiles = fs.getDirectoryScanner( project ).getIncludedFiles( );
                for ( i = 0; i < srcFiles.length; i++ ) {
                    var filename = srcFiles[i];
                
                    junit = project.createTask("macro.junit.run");
                    junit.setDynamicAttribute("file", filename);
                    junit.setDynamicAttribute("basepath", project.getProperty("test.src.dir"));
                    
                    parallel.addTask(junit);
                }    
                
                parallel.execute();
            ]]>    
        </script>        
        
        <macro.junit.report />
        
        <script language="javascript">
            <![CDATA[
            ]]>    
        </script>
    </target>

    <!--
        Starts a parallel build and uses the value of -Dparallel
        to determine the parallel count, otherwise it uses the cpu count
    -->
    <target name="test.parallel" depends="clean, test.init">
        <script language="javascript">
            project.setProperty("NUMBER_OF_PROCESSORS", java.lang.Runtime.getRuntime().availableProcessors());
        </script>

        <!-- 
            Check of parallel is given, if not, set threads to CPU Count.
            If given but no value, set CPU Count, otherwise use value
        -->
        <script language="javascript">
            <![CDATA[
                var parallelCount = project.getProperty("parallel");
                if (parallelCount == null || isNaN(parseInt(parallelCount))) {
                    project.setProperty("parallelCount", project.getProperty("NUMBER_OF_PROCESSORS"));
                } 
                else {
                    project.setProperty("parallelCount", parallelCount);
                }
                
                println("Prop:" + project.getProperty("parallelCount"));
            ]]>
        </script>

        <!-- do to the build -->
        <antcall target="modern" />
    </target>

    <target name="test.parallel222" depends="test.init">
        <for param="file" keepgoing="true" parallel="true" threadCount="4">
            <path>
                <fileset dir="${test.src.dir}" includes="${test.cases.java}" />
            </path>

            <sequential>                 
                <junit fork="yes" forkmode="perBatch" printsummary="on" dir="${basedir}">
                    <!-- build the class path -->
                    <classpath refid="test.suite.classpath"/>

                    <!-- configure the environment for XLT-based test cases -->
                    <sysproperty key="com.xceptance.xlt.home" value="${basedir}"/>
                    <sysproperty key="com.xceptance.xlt.data.directory" value="${test.config.dir}/data"/>
                    <sysproperty key="log4j.configuration" value="file:${test.config.dir}/dev-log4j.properties"/>
                    <sysproperty key="xlt.webDriver" value="${webdriver}"/>

                    <!-- configure the test result formatter -->
                    <formatter type="xml"/>

                    <!-- execute all configured tests -->
                    <batchtest todir="${test.results.dir}" skipNonTests="true">
                        <file id="scripts" file="@{file}" basedir="${test.src.dir}" />
                    </batchtest>
                </junit>                
            </sequential>
            
        </for>
        
        <!--
              Create a test report from the test results.
          -->
        <junitreport todir="${test.results.dir}">
            <!-- determine the test result files -->
            <fileset dir="${test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>

            <!-- generate the HTML report -->
            <report format="noframes" todir="${test.results.dir}"/>
        </junitreport>        
    </target>
    
</project>
